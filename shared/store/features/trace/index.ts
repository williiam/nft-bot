/* eslint-disable @typescript-eslint/no-empty-function */
// redux
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// library
import { ethers } from 'ethers'

// imports
import { getTraceWhaleList, addTraceWhale, deleteTraceWhale } from './actions';

declare type traceWhaleData = {
  address: string;
  name?: string;
  walletAddress?: string;
  status?: string;
  tracetimestamp?: string;
};

export type traceStrate = {
  traceWhaleList: [traceWhaleData] | []
  loading: boolean;
  error: boolean;
  pending: boolean;
};

const initialState: traceStrate = {
  traceWhaleList: [],
  loading: false,
  error: false,
  pending: false

};

export const traceSlice = createSlice({
  name: 'traceData',
  initialState,
  reducers: {
    setTraceWhaleList: (state,action:PayloadAction<[traceWhaleData]>) => {
      console.log('action :', action);
      state.traceWhaleList = action.payload.traceWhaleList;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  // Since this is an API call we have 3 possible outcomes: pending, fulfilled and rejected. We have made allocations for all 3 outcomes.
  // Doing this is good practice as we can tap into the status of the API call and give our users an idea of what's happening in the background.
  extraReducers: (builder) => {
    builder
      // getTraceWhale
      .addCase(getTraceWhaleList.pending, (state) => {
        state.pending = true;
      })
      .addCase(getTraceWhaleList.fulfilled, (state, { payload }) => {
        // When the API call is successful and we get some data,the data becomes the `fulfilled` action payload
        // state.pending = false;
      })
      .addCase(getTraceWhaleList.rejected, (state) => {
        // state.pending = false;
        // state.error = true;
      })
      // addTraceWhale
      .addCase(addTraceWhale.pending, (state) => {
        // state.pending = true;
      })
      .addCase(addTraceWhale.fulfilled, (state) => {
        // state.pending = false;
      })
      .addCase(addTraceWhale.rejected, (state) => {
        // state.pending = false;
        // state.error = true;
      })
      // deleteTraceWhale
      .addCase(deleteTraceWhale.pending, (state) => {
        // state.pending = true;
      })
      .addCase(deleteTraceWhale.fulfilled, (state) => {
        // state.pending = false;
      })
      .addCase(deleteTraceWhale.rejected, (state) => {
        // state.pending = false;
        // state.error = true;
      });
  },
});

export default traceSlice.reducer;

export const { setTraceWhaleList } = traceSlice.actions